OUTPUT_FORMAT("elf32-i386", "elf32-i386", "elf32-i386")
OUTPUT_ARCH(i386)
ENTRY(__entrypoint)
SECTIONS
{
  . = 0x00400000 + SIZEOF_HEADERS;
  
  /* Multiboot header, must be first
   * Sneaky hax to make ld place this at the start of the file */
  .mb_header      : { *(.mb_header) LONG(0) }
  
  /* Dynamic stuff, don't remove :o */
  .hash           : { *(.hash) }
  .dynsym         : { *(.dynsym) }
  .dynstr         : { *(.dynstr) }
  .dynamic        : { *(.dynamic) }
  .gnu.version    : { *(.gnu.version) }
  .gnu.version_d  : { *(.gnu.version_d) }
  .gnu.version_r  : { *(.gnu.version_r) }
  .got.plt        : { *(.got.plt) }
  
  /* Is this used for anything? */
  .eh_frame       : { KEEP (*(.eh_frame)) }
  
  /* Regular text/rodata/data/bss */
  .text           : { *(.text .text.* .gnu.linkonce.t.*) }
  PROVIDE (_etext = .);
  .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
  .data           : { *(.data .data.* .gnu.linkonce.d.*) }
  _edata = .; PROVIDE (edata = .);
  . = ALIGN(0x1000);
  __bss_start = .;
  .bss            : { *(.bss.pagealigned) *(.bss .bss.* .gnu.linkonce.b.*) *(COMMON) }
  _end = .; PROVIDE (end = .);
  
  /* Stabs debugging sections.  */
  .stab          0 : { *(.stab) }
  .stabstr       0 : { *(.stabstr) }
  .stab.excl     0 : { *(.stab.excl) }
  .stab.exclstr  0 : { *(.stab.exclstr) }
  .stab.index    0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment       0 : { *(.comment) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  /DISCARD/ : { *(.note.GNU-stack) }
}
